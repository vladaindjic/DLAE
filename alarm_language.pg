AlarmQuery:
    Query
    | Query SEMICOLON Header
;

Query:
    Expr
    | Query or_op Expr
;

Expr:
    NonTerm
    | Expr and_op NonTerm
;

NonTerm:
    Term
    | not_op Term
;

Term:
    AtomicExpr
    | LPAREN Query RPAREN
;


AtomicExpr:
    RelExpr
    | TimestampExpr
    | RegExpr
;

RelExpr:
    Property rel_op RelValue
;

TimestampExpr:
    AtExpr
    //| LastExpr
;

RegExpr:
    Property reg_expr_op REG_EXPR
;

AtExpr:
    Property at_op Datetime
;

//LastExpr:
//    Property last_op TIME_OFFSET
//;

Property: KEYWORD;


Header:
    HeaderExpr
    | Header COMMA HeaderExpr
;

HeaderExpr:
    CountExpr
;

CountExpr:
    COUNT LPAREN INT RPAREN
;


RelValue:
    INT
    | DOUBLE
    | STRING
    | Datetime
;

Datetime:
    HASH DatetimeValue HASH
;

DatetimeValue:
    YEAR
    | YEAR_MONTH
    | YEAR_MONTH_DAY
    | YEAR_MONTH_DAY_HOUR
    | YEAR_MONTH_DAY_HOUR_MINUTE
    | YEAR_MONTH_DAY_HOUR_MINUTE_SECOND
    // FIXME: eventually add for ms and timezone, if needed
;


rel_op: eq_op | ne_op | lt_op | lte_op | gt_op | gte_op;
reg_expr_op: eq_op | ne_op;

// Terminalni simboli
terminals

and_op: 'and' ;
or_op: 'or' ;
not_op: 'not';

lt_op: '<';
lte_op: '<=';
gt_op: '>';
gte_op: '>=';
eq_op: '==';
ne_op: '!=';

at_op: '@';
last_op: '~';


// Lexer
KEYWORD: /\w+/;

INT: /[+-]?\d+/ ;

DOUBLE: /[+-]?((\d+\.\d*)|(\d*\.\d+))/;

// Old version /\".*\"/
// Middle version/\"[^\"]*\"/    // FIXME: find better solution for this
// FIXME: check if this is now the right version
STRING:
    /\"((\\\")|[^\"])*\"/
;

// Old version /\/.*\//
// Middle version /\/[^\/]*\//   // FIXME: find better solution for this
REG_EXPR:
    /\/((\\\/)|[^\/])*\//
;


LPAREN: '(';
RPAREN: ')';

HASH: '#';

YEAR:
    /\d{4}/
;
YEAR_MONTH:
    /\d{4}\-\d{2}/
;
YEAR_MONTH_DAY:
    /\d{4}\-\d{2}\-\d{2}/
;
YEAR_MONTH_DAY_HOUR:
    /\d{4}\-\d{2}\-\d{2}\s+\d{2}/
;
YEAR_MONTH_DAY_HOUR_MINUTE:
    /\d{4}\-\d{2}\-\d{2}\s+\d{2}:\d{2}/
;
YEAR_MONTH_DAY_HOUR_MINUTE_SECOND:
    /\d{4}\-\d{2}\-\d{2}\s+\d{2}:\d{2}:\d{2}/
;

//TIME_OFFSET:
//    /(\d+(y|Y)(\s+)?)?(\d+M(\s+)?)?(\d+(d|D)(\s+)?)?(\d+(h|H)(\s+)?)?(\d+m(\s+)?)?(\d+(s|S))?/
//;

SEMICOLON: ';';
COMMA: ',';
COUNT: 'count';